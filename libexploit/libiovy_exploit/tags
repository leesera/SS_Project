!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APP_ABI	jni/Application.mk	/^APP_ABI := armeabi-v7a$/;"	m
APP_PLATFORM	jni/Application.mk	/^APP_PLATFORM := android-19$/;"	m
ARRAYELEMS	jni/offsets.c	10;"	d	file:
ASMMAGIC	jni/getroot.c	14;"	d	file:
CHECK_FLAGS_OFFSET	jni/include/offsets.h	6;"	d
DEVNAME_LEN	jni/offsets.c	425;"	d	file:
FLEX_ARRAY_BASE_BYTES_LEFT	jni/include/flex_array.h	46;"	d
FLEX_ARRAY_BASE_SIZE	jni/include/flex_array.h	7;"	d
FLEX_ARRAY_H	jni/include/flex_array.h	2;"	d
FLEX_ARRAY_PART_SIZE	jni/include/flex_array.h	6;"	d
FSYNC_OFFSET	jni/include/offsets.h	5;"	d
GETROOT_H	jni/include/getroot.h	2;"	d
IOVECS	jni/main.c	26;"	d	file:
KERNELVER_LEN	jni/offsets.c	426;"	d	file:
KERNEL_START	jni/include/threadinfo.h	11;"	d
KERNEL_START	jni/include/threadinfo.h	8;"	d
LOCAL_ARM_MODE	jni/Android.mk	/^LOCAL_ARM_MODE := arm$/;"	m
LOCAL_CFLAGS	jni/Android.mk	/^LOCAL_CFLAGS := -O3 -DNDEBUG --all-warnings --extra-warnings$/;"	m
LOCAL_C_INCLUDES	jni/Android.mk	/^LOCAL_C_INCLUDES := $(LOCAL_PATH)\/include\/$/;"	m
LOCAL_MODULE	jni/Android.mk	/^LOCAL_MODULE    := iovyroot$/;"	m
LOCAL_PATH	jni/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_FILES	jni/Android.mk	/^LOCAL_SRC_FILES := main.c getroot.c flex_array.c sid.c offsets.c$/;"	m
MEMMAGIC	jni/main.c	23;"	d	file:
MMAP_ADDR	jni/main.c	28;"	d	file:
MMAP_SIZE	jni/main.c	29;"	d	file:
OFFSETS_H	jni/include/offsets.h	2;"	d
PIPESZ	jni/main.c	25;"	d	file:
POLICYDB_H	jni/include/policydb.h	2;"	d
QUOTE	jni/getroot.c	12;"	d	file:
SENDTHREADS	jni/main.c	27;"	d	file:
SIDTAB_H	jni/include/sidtab.h	2;"	d
SIDTAB_HASH	jni/include/sidtab.h	7;"	d
SIDTAB_HASH_BITS	jni/include/sidtab.h	4;"	d
SIDTAB_HASH_BUCKETS	jni/include/sidtab.h	5;"	d
SIDTAB_HASH_MASK	jni/include/sidtab.h	6;"	d
SIDTAB_SIZE	jni/include/sidtab.h	8;"	d
SID_H	jni/include/sid.h	2;"	d
SYM_BOOLS	jni/include/flex_array.h	14;"	d
SYM_CATS	jni/include/flex_array.h	16;"	d
SYM_CLASSES	jni/include/flex_array.h	10;"	d
SYM_COMMONS	jni/include/flex_array.h	9;"	d
SYM_LEVELS	jni/include/flex_array.h	15;"	d
SYM_NUM	jni/include/flex_array.h	17;"	d
SYM_ROLES	jni/include/flex_array.h	11;"	d
SYM_TYPES	jni/include/flex_array.h	12;"	d
SYM_USERS	jni/include/flex_array.h	13;"	d
THREADINFO_H	jni/include/threadinfo.h	2;"	d
THREAD_SIZE	jni/include/threadinfo.h	12;"	d
THREAD_SIZE	jni/include/threadinfo.h	9;"	d
TOSTR	jni/getroot.c	13;"	d	file:
UDP_SERVER_PORT	jni/main.c	22;"	d	file:
_GNU_SOURCE	jni/main.c	1;"	d	file:
_GNU_SOURCE	jni/offsets.c	1;"	d	file:
__kernel	jni/getroot.c	10;"	d	file:
__kernel	jni/sid.c	9;"	d	file:
__user	jni/getroot.c	9;"	d	file:
__user	jni/sid.c	8;"	d	file:
addr_limit	jni/include/threadinfo.h	/^	unsigned long addr_limit;$/;"	m	struct:thread_info
addr_limit	jni/include/threadinfo.h	/^        unsigned long           addr_limit;     \/* address limit *\/$/;"	m	struct:thread_info
atomic_t	jni/include/threadinfo.h	/^} atomic_t;$/;"	t	typeref:struct:__anon1
cap	jni/include/threadinfo.h	/^	__u32 cap[2];$/;"	m	struct:kernel_cap_struct
cap_bset	jni/include/threadinfo.h	/^	kernel_cap_t	cap_bset;	\/* capability bounding set *\/$/;"	m	struct:cred
cap_effective	jni/include/threadinfo.h	/^	kernel_cap_t	cap_effective;	\/* caps we can actually use *\/$/;"	m	struct:cred
cap_inheritable	jni/include/threadinfo.h	/^	kernel_cap_t	cap_inheritable; \/* caps our children can inherit *\/$/;"	m	struct:cred
cap_permitted	jni/include/threadinfo.h	/^	kernel_cap_t	cap_permitted;	\/* caps we're permitted *\/$/;"	m	struct:cred
cat	jni/include/sidtab.h	/^	struct ebitmap cat;	\/* category set *\/$/;"	m	struct:mls_level	typeref:struct:mls_level::ebitmap
check_flags	jni/include/offsets.h	/^		void* check_flags; \/\/ptmx_fops -> check_flags$/;"	m	union:offsets::__anon4
cmpsidstr	jni/sid.c	/^static inline int cmpsidstr(char* __user usrname, char* __kernel krnlname)$/;"	f	file:
comm	jni/include/threadinfo.h	/^	char comm[16];$/;"	m	struct:task_struct_partial
context	jni/include/sidtab.h	/^	struct context context;	\/* security context structure *\/$/;"	m	struct:sidtab_node	typeref:struct:sidtab_node::context
context	jni/include/sidtab.h	/^struct context {$/;"	s
counter	jni/include/threadinfo.h	/^	int counter;$/;"	m	struct:__anon1
cpu_timers	jni/include/threadinfo.h	/^	struct list_head cpu_timers[3];$/;"	m	struct:task_struct_partial	typeref:struct:task_struct_partial::list_head
create_sid	jni/include/threadinfo.h	/^	u32 create_sid;		\/* fscreate SID *\/$/;"	m	struct:task_security_struct
cred	jni/include/threadinfo.h	/^	struct cred *cred;$/;"	m	struct:task_struct_partial	typeref:struct:task_struct_partial::cred
cred	jni/include/threadinfo.h	/^struct cred {$/;"	s
current_thread_info	jni/include/threadinfo.h	/^static inline struct thread_info* current_thread_info()$/;"	f
devname	jni/include/offsets.h	/^	char* devname; \/\/ro.product.model$/;"	m	struct:offsets
ebitmap	jni/include/sidtab.h	/^struct ebitmap {$/;"	s
egid	jni/include/threadinfo.h	/^	gid_t		egid;		\/* effective GID of the task *\/$/;"	m	struct:cred
element_size	jni/include/flex_array.h	/^			int element_size;$/;"	m	struct:flex_array::__anon2::__anon3
elements	jni/include/flex_array.h	/^	char elements[FLEX_ARRAY_PART_SIZE];$/;"	m	struct:flex_array_part
elements_fit_in_base	jni/flex_array.c	/^static inline int elements_fit_in_base(struct flex_array *fa)$/;"	f	file:
elems_per_part	jni/include/flex_array.h	/^			int elems_per_part;$/;"	m	struct:flex_array::__anon2::__anon3
euid	jni/include/threadinfo.h	/^	uid_t		euid;		\/* effective UID of the task *\/$/;"	m	struct:cred
exec_sid	jni/include/threadinfo.h	/^	u32 exec_sid;		\/* exec SID *\/$/;"	m	struct:task_security_struct
fa_element_to_part_nr	jni/flex_array.c	/^static int fa_element_to_part_nr(struct flex_array *fa,$/;"	f	file:
flags	jni/include/threadinfo.h	/^	unsigned long flags;$/;"	m	struct:thread_info
flags	jni/include/threadinfo.h	/^        unsigned long           flags;          \/* low level flags *\/$/;"	m	struct:thread_info
flex_array	jni/include/flex_array.h	/^struct flex_array {$/;"	s
flex_array_get	jni/flex_array.c	/^void *flex_array_get(struct flex_array *fa, unsigned int element_nr)$/;"	f
flex_array_get_base	jni/flex_array.c	/^void *flex_array_get_base(struct flex_array *fa, unsigned int element_nr)$/;"	f
flex_array_get_from_part	jni/flex_array.c	/^inline void* flex_array_get_from_part(struct flex_array_part* part, int part_nr, struct flex_array* fa, unsigned int element_nr)$/;"	f
flex_array_get_part	jni/flex_array.c	/^struct flex_array_part* flex_array_get_part(struct flex_array* fa, unsigned int element_nr, int* partnr)$/;"	f
flex_array_get_pipe	jni/sid.c	/^static void* flex_array_get_pipe(struct flex_array* __kernel fa, unsigned int element_nr)$/;"	f	file:
flex_array_has_element	jni/flex_array.c	/^inline unsigned int flex_array_has_element(struct flex_array* fa, unsigned int element_nr)$/;"	f
flex_array_part	jni/include/flex_array.h	/^struct flex_array_part {$/;"	s
fsgid	jni/include/threadinfo.h	/^	gid_t		fsgid;		\/* GID for VFS ops *\/$/;"	m	struct:cred
fsuid	jni/include/threadinfo.h	/^	uid_t		fsuid;		\/* UID for VFS ops *\/$/;"	m	struct:cred
fsync	jni/include/offsets.h	/^		void* fsync; \/\/ptmx_fops -> fsync$/;"	m	union:offsets::__anon4
get_devname	jni/offsets.c	/^static char* get_devname(char* name)$/;"	f	file:
get_kernelver	jni/offsets.c	/^static char* get_kernelver(char* str)$/;"	f	file:
get_offsets	jni/offsets.c	/^struct offsets* get_offsets()$/;"	f
get_sid	jni/sid.c	/^int get_sid(char* sidname)$/;"	f
get_thread_info	jni/include/threadinfo.h	/^static inline struct thread_info* get_thread_info(unsigned long sp)$/;"	f
get_types_fa	jni/sid.c	/^static inline struct flex_array* __kernel get_types_fa()$/;"	f	file:
getline	jni/offsets.c	/^size_t getline(char **lineptr, size_t *n, FILE *stream) {$/;"	f
getpipes	jni/main.c	/^static int getpipes()$/;"	f	file:
getroot	jni/main.c	/^int getroot(struct offsets* o)$/;"	f
gid	jni/include/threadinfo.h	/^	gid_t		gid;		\/* real GID of the task *\/$/;"	m	struct:cred
heapspray	jni/main.c	/^static int heapspray(long* target)$/;"	f	file:
highbit	jni/include/sidtab.h	/^	u32 highbit;	\/* highest position in the total bitmap *\/$/;"	m	struct:ebitmap
htable	jni/include/sidtab.h	/^	struct sidtab_node **htable;$/;"	m	struct:sidtab	typeref:struct:sidtab::sidtab_node
index_inside_part	jni/flex_array.c	/^static unsigned int index_inside_part(struct flex_array *fa,$/;"	f	file:
initmappings	jni/main.c	/^static int initmappings()$/;"	f	file:
iovs	jni/main.c	/^static struct iovec iovs[IOVECS];$/;"	v	typeref:struct:iovec	file:
is_cpu_timer_valid	jni/include/threadinfo.h	/^static inline int is_cpu_timer_valid(struct list_head* cpu_timer) $/;"	f
jit_keyring	jni/include/threadinfo.h	/^	unsigned char	jit_keyring;	\/* default keyring to attach requested$/;"	m	struct:cred
joploc	jni/include/offsets.h	/^	void* joploc; \/\/gadget location, see getroot.c$/;"	m	struct:offsets
jopret	jni/include/offsets.h	/^	void* jopret; \/\/return to setfl after check_flags() (fcntl.c), usually inlined in sys_fcntl$/;"	m	struct:offsets
kernel_cap_struct	jni/include/threadinfo.h	/^typedef struct kernel_cap_struct {$/;"	s
kernel_cap_t	jni/include/threadinfo.h	/^} kernel_cap_t;$/;"	t	typeref:struct:kernel_cap_struct
kernelver	jni/include/offsets.h	/^	char* kernelver; \/\/ \/proc\/version$/;"	m	struct:offsets
keycreate_sid	jni/include/threadinfo.h	/^	u32 keycreate_sid;	\/* keycreate SID *\/$/;"	m	struct:task_security_struct
kill_switch	jni/main.c	/^static volatile int kill_switch = 0;$/;"	v	file:
len	jni/include/sidtab.h	/^	u32 len;        \/* length of string in bytes *\/$/;"	m	struct:context
level	jni/include/sidtab.h	/^	struct mls_level level[2]; \/* low == level[0], high == level[1] *\/$/;"	m	struct:mls_range	typeref:struct:mls_range::mls_level
list_head	jni/include/threadinfo.h	/^struct list_head {$/;"	s
main	jni/main.c	/^int main(int argc, char* argv[])$/;"	f
mapunmap	jni/main.c	/^static void* mapunmap(void* param)$/;"	f	file:
mls_enabled	jni/include/policydb.h	/^	int mls_enabled;$/;"	m	struct:policydb
mls_level	jni/include/sidtab.h	/^struct mls_level {$/;"	s
mls_range	jni/include/sidtab.h	/^struct mls_range {$/;"	s
modify_task_cred_uc	jni/getroot.c	/^int modify_task_cred_uc(struct thread_info* __kernel info)$/;"	f
nel	jni/include/sidtab.h	/^	unsigned int nel;	\/* number of elements *\/$/;"	m	struct:sidtab
next	jni/include/sidtab.h	/^	struct sidtab_node *next;$/;"	m	struct:sidtab_node	typeref:struct:sidtab_node::sidtab_node
next	jni/include/threadinfo.h	/^        struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	jni/include/sidtab.h	/^	void *node;	\/* first node in the bitmap *\/$/;"	m	struct:ebitmap
nprim	jni/include/flex_array.h	/^	__u32 nprim;		\/* number of primary names in table *\/$/;"	m	struct:symtab
offsets	jni/include/offsets.h	/^struct offsets {$/;"	s
offsets	jni/offsets.c	/^struct offsets offsets[] = {$/;"	v	typeref:struct:offsets
osid	jni/include/threadinfo.h	/^	u32 osid;		\/* SID prior to last execve *\/$/;"	m	struct:task_security_struct
overflowcheck	jni/main.c	/^static volatile unsigned long overflowcheck = MEMMAGIC;$/;"	v	file:
padding	jni/include/flex_array.h	/^		char padding[FLEX_ARRAY_BASE_SIZE];$/;"	m	union:flex_array::__anon2
parts	jni/include/flex_array.h	/^			struct flex_array_part *parts[];$/;"	m	struct:flex_array::__anon2::__anon3	typeref:struct:flex_array::__anon2::__anon3::flex_array_part
patchaddrlimit	jni/getroot.c	/^struct thread_info* patchaddrlimit()$/;"	f
pipefd	jni/main.c	/^static int pipefd[2];$/;"	v	file:
policydb	jni/include/offsets.h	/^	void* policydb; \/\/optional, for selinux context$/;"	m	struct:offsets
policydb	jni/include/policydb.h	/^struct policydb {$/;"	s
policydb	jni/include/policydb.h	/^struct policydb* policydb;$/;"	v	typeref:struct:policydb
preempt_count	jni/include/threadinfo.h	/^	int preempt_count;$/;"	m	struct:thread_info
preparejop	jni/getroot.c	/^void preparejop(void** addr, void* jopret)$/;"	f
prev	jni/include/threadinfo.h	/^        struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
process_keyring	jni/include/threadinfo.h	/^	void	*process_keyring; \/* keyring private to this process *\/$/;"	m	struct:cred
range	jni/include/sidtab.h	/^	struct mls_range range;$/;"	m	struct:context	typeref:struct:context::mls_range
read_at_address_pipe	jni/getroot.c	/^int read_at_address_pipe(void* address, void* buf, ssize_t len)$/;"	f
readpipe	jni/main.c	/^static void* readpipe(void* param)$/;"	f	file:
real_cred	jni/include/threadinfo.h	/^	struct cred *real_cred;$/;"	m	struct:task_struct_partial	typeref:struct:task_struct_partial::cred
reciprocal_divide	jni/flex_array.c	/^static inline __u32 reciprocal_divide(__u32 A, __u32 R)$/;"	f	file:
reciprocal_elems	jni/include/flex_array.h	/^			__u32 reciprocal_elems;$/;"	m	struct:flex_array::__anon2::__anon3
replacement_session_keyring	jni/include/threadinfo.h	/^	struct cred *replacement_session_keyring;$/;"	m	struct:task_struct_partial	typeref:struct:task_struct_partial::cred
request_key_auth	jni/include/threadinfo.h	/^	void	*request_key_auth; \/* assumed request_key authority *\/$/;"	m	struct:cred
role	jni/include/sidtab.h	/^	u32 role;$/;"	m	struct:context
securebits	jni/include/threadinfo.h	/^	unsigned	securebits;	\/* SUID-less security management *\/$/;"	m	struct:cred
security	jni/include/threadinfo.h	/^	struct task_security_struct	*security;	\/* subjective LSM security *\/$/;"	m	struct:cred	typeref:struct:cred::task_security_struct
selinux_enabled	jni/include/offsets.h	/^	void* selinux_enabled;$/;"	m	struct:offsets
selinux_enforcing	jni/include/offsets.h	/^	void* selinux_enforcing;$/;"	m	struct:offsets
sens	jni/include/sidtab.h	/^	u32 sens;		\/* sensitivity *\/$/;"	m	struct:mls_level
session_keyring	jni/include/threadinfo.h	/^	void	*session_keyring; \/* keyring inherited over fork *\/$/;"	m	struct:cred
setfdlimit	jni/main.c	/^static int setfdlimit()$/;"	f	file:
setprocesspriority	jni/main.c	/^static int setprocesspriority()$/;"	f	file:
sgid	jni/include/threadinfo.h	/^	gid_t		sgid;		\/* saved GID of the task *\/$/;"	m	struct:cred
sid	jni/include/sidtab.h	/^	u32 sid;		\/* security identifier *\/$/;"	m	struct:sidtab_node
sid	jni/include/threadinfo.h	/^	u32 sid;		\/* current SID *\/$/;"	m	struct:task_security_struct
sidtab	jni/include/offsets.h	/^	void* sidtab; \/\/optional, for selinux contenxt$/;"	m	struct:offsets
sidtab	jni/include/sidtab.h	/^struct sidtab {$/;"	s
sidtab	jni/include/sidtab.h	/^struct sidtab* sidtab;$/;"	v	typeref:struct:sidtab
sidtab_node	jni/include/sidtab.h	/^struct sidtab_node {$/;"	s
sockcreate_sid	jni/include/threadinfo.h	/^	u32 sockcreate_sid;	\/* fscreate SID *\/$/;"	m	struct:task_security_struct
startmapunmap	jni/main.c	/^static int startmapunmap()$/;"	f	file:
startreadpipe	jni/main.c	/^static int startreadpipe()$/;"	f	file:
startwritepipe	jni/main.c	/^static int startwritepipe(long targetval)$/;"	f	file:
stop_send	jni/main.c	/^static volatile int stop_send = 0;$/;"	v	file:
str	jni/include/sidtab.h	/^	char *str;	\/* string representation if context cannot be mapped. *\/$/;"	m	struct:context
suid	jni/include/threadinfo.h	/^	uid_t		suid;		\/* saved UID of the task *\/$/;"	m	struct:cred
sym_val_to_name	jni/include/policydb.h	/^	struct flex_array *sym_val_to_name[SYM_NUM];$/;"	m	struct:policydb	typeref:struct:policydb::flex_array
symtab	jni/include/flex_array.h	/^struct symtab {$/;"	s
symtab	jni/include/policydb.h	/^	struct symtab symtab[SYM_NUM];$/;"	m	struct:policydb	typeref:struct:policydb::symtab
table	jni/include/flex_array.h	/^	void *table;	\/* hash table (keyed on a string) *\/$/;"	m	struct:symtab
task	jni/include/threadinfo.h	/^	struct task_struct *task;$/;"	m	struct:thread_info	typeref:struct:thread_info::task_struct
task	jni/include/threadinfo.h	/^        struct task_struct      *task;          \/* main task structure *\/$/;"	m	struct:thread_info	typeref:struct:thread_info::task_struct
task_security_struct	jni/include/threadinfo.h	/^struct task_security_struct {$/;"	s
task_struct_partial	jni/include/threadinfo.h	/^struct task_struct_partial$/;"	s
tgcred	jni/include/threadinfo.h	/^	void	*tgcred; \/* thread-group shared credentials *\/$/;"	m	struct:cred
thread_info	jni/include/threadinfo.h	/^struct thread_info {$/;"	s
thread_info	jni/include/threadinfo.h	/^struct thread_info$/;"	s
thread_keyring	jni/include/threadinfo.h	/^	void	*thread_keyring; \/* keyring private to this thread *\/$/;"	m	struct:cred
total_nr_elements	jni/include/flex_array.h	/^			int total_nr_elements;$/;"	m	struct:flex_array::__anon2::__anon3
type	jni/include/sidtab.h	/^	u32 type;$/;"	m	struct:context
u32	jni/include/sidtab.h	/^typedef unsigned int u32;$/;"	t
u32	jni/include/threadinfo.h	/^typedef unsigned int u32;$/;"	t
uid	jni/include/threadinfo.h	/^	uid_t		uid;		\/* real UID of the task *\/$/;"	m	struct:cred
usage	jni/include/threadinfo.h	/^	atomic_t	usage;$/;"	m	struct:cred
user	jni/include/sidtab.h	/^	u32 user;$/;"	m	struct:context
wbuf	jni/main.c	/^static char wbuf[4096];$/;"	v	file:
write_at_address	jni/main.c	/^static int write_at_address(void* target, unsigned long targetval)$/;"	f	file:
write_at_address_pipe	jni/getroot.c	/^int write_at_address_pipe(void* address, void* buf, ssize_t len)$/;"	f
writel_at_address_pipe	jni/getroot.c	/^inline int writel_at_address_pipe(void* address, unsigned long val)$/;"	f
writemsg	jni/main.c	/^static void* writemsg(void* param)$/;"	f	file:
writepipe	jni/main.c	/^static void* writepipe(void* param)$/;"	f	file:
